=== tests/cases/compiler/indexedAccessTypeConstraints.ts ===

// Repro from #14557

interface IData<T> {
>IData : Symbol(IData, Decl(indexedAccessTypeConstraints.ts, 0, 0))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 3, 16))

    content: T;
>content : Symbol(IData.content, Decl(indexedAccessTypeConstraints.ts, 3, 20))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 3, 16))
}

type Data<T> = {
>Data : Symbol(Data, Decl(indexedAccessTypeConstraints.ts, 5, 1))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 7, 10))

    get: <K extends keyof T>(prop: K) => T[K];
>get : Symbol(get, Decl(indexedAccessTypeConstraints.ts, 7, 16))
>K : Symbol(K, Decl(indexedAccessTypeConstraints.ts, 8, 10))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 7, 10))
>prop : Symbol(prop, Decl(indexedAccessTypeConstraints.ts, 8, 29))
>K : Symbol(K, Decl(indexedAccessTypeConstraints.ts, 8, 10))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 7, 10))
>K : Symbol(K, Decl(indexedAccessTypeConstraints.ts, 8, 10))

};

class Parent<M> {
>Parent : Symbol(Parent, Decl(indexedAccessTypeConstraints.ts, 9, 2))
>M : Symbol(M, Decl(indexedAccessTypeConstraints.ts, 11, 13))

    private data: Data<M>;
>data : Symbol(Parent.data, Decl(indexedAccessTypeConstraints.ts, 11, 17))
>Data : Symbol(Data, Decl(indexedAccessTypeConstraints.ts, 5, 1))
>M : Symbol(M, Decl(indexedAccessTypeConstraints.ts, 11, 13))

    getData(): Data<M> {
>getData : Symbol(Parent.getData, Decl(indexedAccessTypeConstraints.ts, 12, 26))
>Data : Symbol(Data, Decl(indexedAccessTypeConstraints.ts, 5, 1))
>M : Symbol(M, Decl(indexedAccessTypeConstraints.ts, 11, 13))

        return this.data;
>this.data : Symbol(Parent.data, Decl(indexedAccessTypeConstraints.ts, 11, 17))
>this : Symbol(Parent, Decl(indexedAccessTypeConstraints.ts, 9, 2))
>data : Symbol(Parent.data, Decl(indexedAccessTypeConstraints.ts, 11, 17))
    }
}

export class Foo<C> extends Parent<IData<C>> {
>Foo : Symbol(Foo, Decl(indexedAccessTypeConstraints.ts, 16, 1))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 18, 17))
>Parent : Symbol(Parent, Decl(indexedAccessTypeConstraints.ts, 9, 2))
>IData : Symbol(IData, Decl(indexedAccessTypeConstraints.ts, 0, 0))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 18, 17))

    getContent(): C {
>getContent : Symbol(Foo.getContent, Decl(indexedAccessTypeConstraints.ts, 18, 46))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 18, 17))

        return this.getData().get('content');
>this.getData().get : Symbol(get, Decl(indexedAccessTypeConstraints.ts, 7, 16))
>this.getData : Symbol(Parent.getData, Decl(indexedAccessTypeConstraints.ts, 12, 26))
>this : Symbol(Foo, Decl(indexedAccessTypeConstraints.ts, 16, 1))
>getData : Symbol(Parent.getData, Decl(indexedAccessTypeConstraints.ts, 12, 26))
>get : Symbol(get, Decl(indexedAccessTypeConstraints.ts, 7, 16))
    }
}

export class Bar<C, T extends IData<C>> extends Parent<T> {
>Bar : Symbol(Bar, Decl(indexedAccessTypeConstraints.ts, 22, 1))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 24, 17))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 24, 19))
>IData : Symbol(IData, Decl(indexedAccessTypeConstraints.ts, 0, 0))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 24, 17))
>Parent : Symbol(Parent, Decl(indexedAccessTypeConstraints.ts, 9, 2))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 24, 19))

    getContent(): C {
>getContent : Symbol(Bar.getContent, Decl(indexedAccessTypeConstraints.ts, 24, 59))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 24, 17))

        return this.getData().get('content');
>this.getData().get : Symbol(get, Decl(indexedAccessTypeConstraints.ts, 7, 16))
>this.getData : Symbol(Parent.getData, Decl(indexedAccessTypeConstraints.ts, 12, 26))
>this : Symbol(Bar, Decl(indexedAccessTypeConstraints.ts, 22, 1))
>getData : Symbol(Parent.getData, Decl(indexedAccessTypeConstraints.ts, 12, 26))
>get : Symbol(get, Decl(indexedAccessTypeConstraints.ts, 7, 16))
    }
}

// Repro from #14557

function foo<C, T extends { content: C }>(x: C, y: T['content']) {
>foo : Symbol(foo, Decl(indexedAccessTypeConstraints.ts, 28, 1))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 32, 13))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 32, 15))
>content : Symbol(content, Decl(indexedAccessTypeConstraints.ts, 32, 27))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 32, 13))
>x : Symbol(x, Decl(indexedAccessTypeConstraints.ts, 32, 42))
>C : Symbol(C, Decl(indexedAccessTypeConstraints.ts, 32, 13))
>y : Symbol(y, Decl(indexedAccessTypeConstraints.ts, 32, 47))
>T : Symbol(T, Decl(indexedAccessTypeConstraints.ts, 32, 15))

    x = y;
>x : Symbol(x, Decl(indexedAccessTypeConstraints.ts, 32, 42))
>y : Symbol(y, Decl(indexedAccessTypeConstraints.ts, 32, 47))
}

