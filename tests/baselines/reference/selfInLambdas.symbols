=== tests/cases/compiler/selfInLambdas.ts ===

interface MouseEvent {
>MouseEvent : Symbol(MouseEvent, Decl(selfInLambdas.ts, 0, 0))

    x: number;
>x : Symbol(MouseEvent.x, Decl(selfInLambdas.ts, 1, 22))

    y: number;
>y : Symbol(MouseEvent.y, Decl(selfInLambdas.ts, 2, 14))
}

declare var window: Window;
>window : Symbol(window, Decl(selfInLambdas.ts, 6, 11))
>Window : Symbol(Window, Decl(selfInLambdas.ts, 6, 27))

interface Window {
>Window : Symbol(Window, Decl(selfInLambdas.ts, 6, 27))

    onmousemove: (ev: MouseEvent) => any;
>onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 7, 18))
>ev : Symbol(ev, Decl(selfInLambdas.ts, 8, 18))
>MouseEvent : Symbol(MouseEvent, Decl(selfInLambdas.ts, 0, 0))
    
}
var o = {
>o : Symbol(o, Decl(selfInLambdas.ts, 11, 3))

    counter: 0,
>counter : Symbol(counter, Decl(selfInLambdas.ts, 11, 9))

    start: function() {
>start : Symbol(start, Decl(selfInLambdas.ts, 13, 15))

        window.onmousemove = () => {
>window.onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 7, 18))
>window : Symbol(window, Decl(selfInLambdas.ts, 6, 11))
>onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 7, 18))

            this.counter++
>this.counter : Symbol(counter, Decl(selfInLambdas.ts, 11, 9))
>this : Symbol(o, Decl(selfInLambdas.ts, 11, 7))
>counter : Symbol(counter, Decl(selfInLambdas.ts, 11, 9))

            var f = () => this.counter;
>f : Symbol(f, Decl(selfInLambdas.ts, 19, 15))
>this.counter : Symbol(counter, Decl(selfInLambdas.ts, 11, 9))
>this : Symbol(o, Decl(selfInLambdas.ts, 11, 7))
>counter : Symbol(counter, Decl(selfInLambdas.ts, 11, 9))

        }

    }

}



class X {
>X : Symbol(X, Decl(selfInLambdas.ts, 25, 1))

	private value = "value";
>value : Symbol(X.value, Decl(selfInLambdas.ts, 29, 9))

	public foo() {
>foo : Symbol(X.foo, Decl(selfInLambdas.ts, 30, 25))

		var outer= () => {
>outer : Symbol(outer, Decl(selfInLambdas.ts, 33, 5))

            var x = this.value;
>x : Symbol(x, Decl(selfInLambdas.ts, 34, 15))
>this.value : Symbol(X.value, Decl(selfInLambdas.ts, 29, 9))
>this : Symbol(X, Decl(selfInLambdas.ts, 25, 1))
>value : Symbol(X.value, Decl(selfInLambdas.ts, 29, 9))

            var inner = () => {
>inner : Symbol(inner, Decl(selfInLambdas.ts, 35, 15))

                var y = this.value;
>y : Symbol(y, Decl(selfInLambdas.ts, 36, 19))
>this.value : Symbol(X.value, Decl(selfInLambdas.ts, 29, 9))
>this : Symbol(X, Decl(selfInLambdas.ts, 25, 1))
>value : Symbol(X.value, Decl(selfInLambdas.ts, 29, 9))
			}

			inner();
>inner : Symbol(inner, Decl(selfInLambdas.ts, 35, 15))

		};
		outer();
>outer : Symbol(outer, Decl(selfInLambdas.ts, 33, 5))
	}

}

