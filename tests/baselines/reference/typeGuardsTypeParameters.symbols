=== tests/cases/conformance/controlFlow/typeGuardsTypeParameters.ts ===

// Type guards involving type parameters produce intersection types

class C {
>C : Symbol(C, Decl(typeGuardsTypeParameters.ts, 0, 0))

    prop: string;
>prop : Symbol(C.prop, Decl(typeGuardsTypeParameters.ts, 3, 9))
}

function f1<T>(x: T) {
>f1 : Symbol(f1, Decl(typeGuardsTypeParameters.ts, 5, 1))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 7, 12))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 7, 15))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 7, 12))

    if (x instanceof C) {
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 7, 15))
>C : Symbol(C, Decl(typeGuardsTypeParameters.ts, 0, 0))

        let v1: T = x;
>v1 : Symbol(v1, Decl(typeGuardsTypeParameters.ts, 9, 11))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 7, 12))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 7, 15))

        let v2: C = x;
>v2 : Symbol(v2, Decl(typeGuardsTypeParameters.ts, 10, 11))
>C : Symbol(C, Decl(typeGuardsTypeParameters.ts, 0, 0))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 7, 15))

        x.prop;
>x.prop : Symbol(C.prop, Decl(typeGuardsTypeParameters.ts, 3, 9))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 7, 15))
>prop : Symbol(C.prop, Decl(typeGuardsTypeParameters.ts, 3, 9))
    }
}

function f2<T>(x: T) {
>f2 : Symbol(f2, Decl(typeGuardsTypeParameters.ts, 13, 1))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 15, 12))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 15, 15))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 15, 12))

    if (typeof x === "string") {
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 15, 15))

        let v1: T = x;
>v1 : Symbol(v1, Decl(typeGuardsTypeParameters.ts, 17, 11))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 15, 12))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 15, 15))

        let v2: string = x;
>v2 : Symbol(v2, Decl(typeGuardsTypeParameters.ts, 18, 11))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 15, 15))

        x.length;
>x.length : Symbol(String.length, Decl(lib.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardsTypeParameters.ts, 15, 15))
>length : Symbol(String.length, Decl(lib.d.ts, --, --))
    }
}

// Repro from #13872

function fun<T>(item: { [P in keyof T]: T[P] }) {
>fun : Symbol(fun, Decl(typeGuardsTypeParameters.ts, 21, 1))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 25, 13))
>item : Symbol(item, Decl(typeGuardsTypeParameters.ts, 25, 16))
>P : Symbol(P, Decl(typeGuardsTypeParameters.ts, 25, 25))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 25, 13))
>T : Symbol(T, Decl(typeGuardsTypeParameters.ts, 25, 13))
>P : Symbol(P, Decl(typeGuardsTypeParameters.ts, 25, 25))

    const strings: string[] = [];
>strings : Symbol(strings, Decl(typeGuardsTypeParameters.ts, 26, 9))

    for (const key in item) {
>key : Symbol(key, Decl(typeGuardsTypeParameters.ts, 27, 14))
>item : Symbol(item, Decl(typeGuardsTypeParameters.ts, 25, 16))

        const value = item[key];
>value : Symbol(value, Decl(typeGuardsTypeParameters.ts, 28, 13))
>item : Symbol(item, Decl(typeGuardsTypeParameters.ts, 25, 16))
>key : Symbol(key, Decl(typeGuardsTypeParameters.ts, 27, 14))

        if (typeof value === "string") {
>value : Symbol(value, Decl(typeGuardsTypeParameters.ts, 28, 13))

            strings.push(value);
>strings.push : Symbol(Array.push, Decl(lib.d.ts, --, --))
>strings : Symbol(strings, Decl(typeGuardsTypeParameters.ts, 26, 9))
>push : Symbol(Array.push, Decl(lib.d.ts, --, --))
>value : Symbol(value, Decl(typeGuardsTypeParameters.ts, 28, 13))
        }
    }
}

