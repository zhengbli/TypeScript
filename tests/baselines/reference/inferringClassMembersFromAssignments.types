=== tests/cases/conformance/salsa/a.js ===

class C {
>C : C

    constructor() {
        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inConstructor = 0;
>this.inConstructor = 0 : 0
>this.inConstructor : string | number
>this : this
>inConstructor : string | number
>0 : 0
        }
        else {
            this.inConstructor = "string"
>this.inConstructor = "string" : "string"
>this.inConstructor : string | number
>this : this
>inConstructor : string | number
>"string" : "string"
        }
        this.inMultiple = 0;
>this.inMultiple = 0 : 0
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>0 : 0
    }
    method() {
>method : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inMethod = 0;
>this.inMethod = 0 : 0
>this.inMethod : string | number | undefined
>this : this
>inMethod : string | number | undefined
>0 : 0
        }
        else {
            this.inMethod = "string"
>this.inMethod = "string" : "string"
>this.inMethod : string | number | undefined
>this : this
>inMethod : string | number | undefined
>"string" : "string"
        }
        this.inMultiple = "string";
>this.inMultiple = "string" : "string"
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>"string" : "string"
    }
    get() {
>get : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inGetter = 0;
>this.inGetter = 0 : 0
>this.inGetter : string | number | undefined
>this : this
>inGetter : string | number | undefined
>0 : 0
        }
        else {
            this.inGetter = "string"
>this.inGetter = "string" : "string"
>this.inGetter : string | number | undefined
>this : this
>inGetter : string | number | undefined
>"string" : "string"
        }
        this.inMultiple = false;
>this.inMultiple = false : false
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>false : false
    }
    set() {
>set : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inSetter = 0;
>this.inSetter = 0 : 0
>this.inSetter : string | number | undefined
>this : this
>inSetter : string | number | undefined
>0 : 0
        }
        else {
            this.inSetter = "string"
>this.inSetter = "string" : "string"
>this.inSetter : string | number | undefined
>this : this
>inSetter : string | number | undefined
>"string" : "string"
        }
    }
    static method() {
>method : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticMethod = 0;
>this.inStaticMethod = 0 : 0
>this.inStaticMethod : string | number | undefined
>this : typeof C
>inStaticMethod : string | number | undefined
>0 : 0
        }
        else {
            this.inStaticMethod = "string"
>this.inStaticMethod = "string" : "string"
>this.inStaticMethod : string | number | undefined
>this : typeof C
>inStaticMethod : string | number | undefined
>"string" : "string"
        }
    }
    static get() {
>get : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticGetter = 0;
>this.inStaticGetter = 0 : 0
>this.inStaticGetter : string | number | undefined
>this : typeof C
>inStaticGetter : string | number | undefined
>0 : 0
        }
        else {
            this.inStaticGetter = "string"
>this.inStaticGetter = "string" : "string"
>this.inStaticGetter : string | number | undefined
>this : typeof C
>inStaticGetter : string | number | undefined
>"string" : "string"
        }
    }
    static set() {
>set : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticSetter = 0;
>this.inStaticSetter = 0 : 0
>this.inStaticSetter : string | number | undefined
>this : typeof C
>inStaticSetter : string | number | undefined
>0 : 0
        }
        else {
            this.inStaticSetter = "string"
>this.inStaticSetter = "string" : "string"
>this.inStaticSetter : string | number | undefined
>this : typeof C
>inStaticSetter : string | number | undefined
>"string" : "string"
        }
    }
}

=== tests/cases/conformance/salsa/b.ts ===
var c = new C();
>c : C
>new C() : C
>C : typeof C

var stringOrNumber: string | number;
>stringOrNumber : string | number

var stringOrNumber = c.inConstructor;
>stringOrNumber : string | number
>c.inConstructor : string | number
>c : C
>inConstructor : string | number

var stringOrNumberOrUndefined: string | number | undefined;
>stringOrNumberOrUndefined : string | number | undefined

var stringOrNumberOrUndefined = c.inMethod;
>stringOrNumberOrUndefined : string | number | undefined
>c.inMethod : string | number | undefined
>c : C
>inMethod : string | number | undefined

var stringOrNumberOrUndefined = c.inGetter;
>stringOrNumberOrUndefined : string | number | undefined
>c.inGetter : string | number | undefined
>c : C
>inGetter : string | number | undefined

var stringOrNumberOrUndefined = c.inSetter;
>stringOrNumberOrUndefined : string | number | undefined
>c.inSetter : string | number | undefined
>c : C
>inSetter : string | number | undefined

var stringOrNumberOrBoolean: string | number | boolean;
>stringOrNumberOrBoolean : string | number | boolean

var stringOrNumberOrBoolean = c.inMultiple;
>stringOrNumberOrBoolean : string | number | boolean
>c.inMultiple : string | number | boolean
>c : C
>inMultiple : string | number | boolean


var stringOrNumberOrUndefined = C.inStaticMethod;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticMethod : string | number | undefined
>C : typeof C
>inStaticMethod : string | number | undefined

var stringOrNumberOrUndefined = C.inStaticGetter;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticGetter : string | number | undefined
>C : typeof C
>inStaticGetter : string | number | undefined

var stringOrNumberOrUndefined = C.inStaticSetter;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticSetter : string | number | undefined
>C : typeof C
>inStaticSetter : string | number | undefined

