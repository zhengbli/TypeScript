=== tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.esnext.1.ts ===
async function * inferReturnType1() {
>inferReturnType1 : () => AsyncIterableIterator<any>
}
async function * inferReturnType2() {
>inferReturnType2 : () => AsyncIterableIterator<any>

    yield;
>yield : any
}
async function * inferReturnType3() {
>inferReturnType3 : () => AsyncIterableIterator<1>

    yield 1;
>yield 1 : any
>1 : 1
}
async function * inferReturnType4() {
>inferReturnType4 : () => AsyncIterableIterator<number>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2
}
async function * inferReturnType5() {
>inferReturnType5 : () => AsyncIterableIterator<1>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1
}
const assignability1: () => AsyncIterableIterator<number> = async function * () {
>assignability1 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield 1;} : () => AsyncIterableIterator<1>

    yield 1;
>yield 1 : any
>1 : 1

};
const assignability2: () => AsyncIterableIterator<number> = async function * () {
>assignability2 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield* [1, 2];} : () => AsyncIterableIterator<number>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2

};
const assignability3: () => AsyncIterableIterator<number> = async function * () {
>assignability3 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncIterableIterator<1>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1

};
const assignability4: () => AsyncIterable<number> = async function * () {
>assignability4 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield 1;} : () => AsyncIterableIterator<1>

    yield 1;
>yield 1 : any
>1 : 1

};
const assignability5: () => AsyncIterable<number> = async function * () {
>assignability5 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield* [1, 2];} : () => AsyncIterableIterator<number>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2

};
const assignability6: () => AsyncIterable<number> = async function * () {
>assignability6 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncIterableIterator<1>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1

};
const assignability7: () => AsyncIterator<number> = async function * () {
>assignability7 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield 1;} : () => AsyncIterableIterator<1>

    yield 1;
>yield 1 : any
>1 : 1

};
const assignability8: () => AsyncIterator<number> = async function * () {
>assignability8 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield* [1, 2];} : () => AsyncIterableIterator<number>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2

};
const assignability9: () => AsyncIterator<number> = async function * () {
>assignability9 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncIterableIterator<1>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1

};
async function * explicitReturnType1(): AsyncIterableIterator<number> {
>explicitReturnType1 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield 1;
>yield 1 : any
>1 : 1
}
async function * explicitReturnType2(): AsyncIterableIterator<number> {
>explicitReturnType2 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2
}
async function * explicitReturnType3(): AsyncIterableIterator<number> {
>explicitReturnType3 : () => AsyncIterableIterator<number>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1
}
async function * explicitReturnType4(): AsyncIterable<number> {
>explicitReturnType4 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>

    yield 1;
>yield 1 : any
>1 : 1
}
async function * explicitReturnType5(): AsyncIterable<number> {
>explicitReturnType5 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2
}
async function * explicitReturnType6(): AsyncIterable<number> {
>explicitReturnType6 : () => AsyncIterable<number>
>AsyncIterable : AsyncIterable<T>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1
}
async function * explicitReturnType7(): AsyncIterator<number> {
>explicitReturnType7 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>

    yield 1;
>yield 1 : any
>1 : 1
}
async function * explicitReturnType8(): AsyncIterator<number> {
>explicitReturnType8 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>

    yield* [1, 2];
>yield* [1, 2] : any
>[1, 2] : number[]
>1 : 1
>2 : 2
}
async function * explicitReturnType9(): AsyncIterator<number> {
>explicitReturnType9 : () => AsyncIterator<number>
>AsyncIterator : AsyncIterator<T>

    yield* (async function * () { yield 1; })();
>yield* (async function * () { yield 1; })() : any
>(async function * () { yield 1; })() : AsyncIterableIterator<1>
>(async function * () { yield 1; }) : () => AsyncIterableIterator<1>
>async function * () { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1
}
async function * explicitReturnType10(): {} {
>explicitReturnType10 : () => {}

    yield 1;
>yield 1 : any
>1 : 1
}
async function * awaitedType1() {
>awaitedType1 : () => AsyncIterableIterator<any>

    const x = await 1;
>x : 1
>await 1 : 1
>1 : 1
}
async function * awaitedType2() {
>awaitedType2 : () => AsyncIterableIterator<any>

    const x = await Promise.resolve(1);
>x : number
>await Promise.resolve(1) : number
>Promise.resolve(1) : Promise<number>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>1 : 1
}
