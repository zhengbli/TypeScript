=== tests/cases/conformance/jsx/file.tsx ===

import React = require('react')
>React : Symbol(React, Decl(file.tsx, 0, 0))

declare function ComponentWithTwoAttributes<K,V>(l: {key1: K, value: V}): JSX.Element;
>ComponentWithTwoAttributes : Symbol(ComponentWithTwoAttributes, Decl(file.tsx, 1, 31))
>K : Symbol(K, Decl(file.tsx, 3, 44))
>V : Symbol(V, Decl(file.tsx, 3, 46))
>l : Symbol(l, Decl(file.tsx, 3, 49))
>key1 : Symbol(key1, Decl(file.tsx, 3, 53))
>K : Symbol(K, Decl(file.tsx, 3, 44))
>value : Symbol(value, Decl(file.tsx, 3, 61))
>V : Symbol(V, Decl(file.tsx, 3, 46))
>JSX : Symbol(JSX, Decl(react.d.ts, 2352, 1))
>Element : Symbol(JSX.Element, Decl(react.d.ts, 2355, 27))

// OK
function Baz<T,U>(key1: T, value: U) {
>Baz : Symbol(Baz, Decl(file.tsx, 3, 86))
>T : Symbol(T, Decl(file.tsx, 6, 13))
>U : Symbol(U, Decl(file.tsx, 6, 15))
>key1 : Symbol(key1, Decl(file.tsx, 6, 18))
>T : Symbol(T, Decl(file.tsx, 6, 13))
>value : Symbol(value, Decl(file.tsx, 6, 26))
>U : Symbol(U, Decl(file.tsx, 6, 15))

    let a0 = <ComponentWithTwoAttributes key1={key1} value={value} />
>a0 : Symbol(a0, Decl(file.tsx, 7, 7))
>ComponentWithTwoAttributes : Symbol(ComponentWithTwoAttributes, Decl(file.tsx, 1, 31))
>key1 : Symbol(key1, Decl(file.tsx, 7, 40))
>key1 : Symbol(key1, Decl(file.tsx, 6, 18))
>value : Symbol(value, Decl(file.tsx, 7, 52))
>value : Symbol(value, Decl(file.tsx, 6, 26))

    let a1 = <ComponentWithTwoAttributes {...{key1, value: value}} key="Component" />
>a1 : Symbol(a1, Decl(file.tsx, 8, 7))
>ComponentWithTwoAttributes : Symbol(ComponentWithTwoAttributes, Decl(file.tsx, 1, 31))
>key1 : Symbol(key1, Decl(file.tsx, 8, 46))
>value : Symbol(value, Decl(file.tsx, 8, 51))
>value : Symbol(value, Decl(file.tsx, 6, 26))
>key : Symbol(key, Decl(file.tsx, 8, 66))
}

declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
>Link : Symbol(Link, Decl(file.tsx, 9, 1))
>U : Symbol(U, Decl(file.tsx, 11, 22))
>l : Symbol(l, Decl(file.tsx, 11, 25))
>func : Symbol(func, Decl(file.tsx, 11, 29))
>arg : Symbol(arg, Decl(file.tsx, 11, 36))
>U : Symbol(U, Decl(file.tsx, 11, 22))
>JSX : Symbol(JSX, Decl(react.d.ts, 2352, 1))
>Element : Symbol(JSX.Element, Decl(react.d.ts, 2355, 27))

// OK
function createLink(func: (a: number)=>void) {
>createLink : Symbol(createLink, Decl(file.tsx, 11, 65))
>func : Symbol(func, Decl(file.tsx, 14, 20))
>a : Symbol(a, Decl(file.tsx, 14, 27))

    let o = <Link func={func} />
>o : Symbol(o, Decl(file.tsx, 15, 7))
>Link : Symbol(Link, Decl(file.tsx, 9, 1))
>func : Symbol(func, Decl(file.tsx, 15, 17))
>func : Symbol(func, Decl(file.tsx, 14, 20))
}

function createLink1(func: (a: number)=>boolean) {
>createLink1 : Symbol(createLink1, Decl(file.tsx, 16, 1))
>func : Symbol(func, Decl(file.tsx, 18, 21))
>a : Symbol(a, Decl(file.tsx, 18, 28))

    let o = <Link func={func} />
>o : Symbol(o, Decl(file.tsx, 19, 7))
>Link : Symbol(Link, Decl(file.tsx, 9, 1))
>func : Symbol(func, Decl(file.tsx, 19, 17))
>func : Symbol(func, Decl(file.tsx, 18, 21))
}

interface InferParamProp<T> {
>InferParamProp : Symbol(InferParamProp, Decl(file.tsx, 20, 1))
>T : Symbol(T, Decl(file.tsx, 22, 25))

    values: Array<T>;
>values : Symbol(InferParamProp.values, Decl(file.tsx, 22, 29))
>Array : Symbol(Array, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(file.tsx, 22, 25))

    selectHandler: (selectedVal: T) => void;
>selectHandler : Symbol(InferParamProp.selectHandler, Decl(file.tsx, 23, 21))
>selectedVal : Symbol(selectedVal, Decl(file.tsx, 24, 20))
>T : Symbol(T, Decl(file.tsx, 22, 25))
}

declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
>InferParamComponent : Symbol(InferParamComponent, Decl(file.tsx, 25, 1))
>T : Symbol(T, Decl(file.tsx, 27, 37))
>attr : Symbol(attr, Decl(file.tsx, 27, 40))
>InferParamProp : Symbol(InferParamProp, Decl(file.tsx, 20, 1))
>T : Symbol(T, Decl(file.tsx, 27, 37))
>JSX : Symbol(JSX, Decl(react.d.ts, 2352, 1))
>Element : Symbol(JSX.Element, Decl(react.d.ts, 2355, 27))

// OK
let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} />;
>i : Symbol(i, Decl(file.tsx, 30, 3))
>InferParamComponent : Symbol(InferParamComponent, Decl(file.tsx, 25, 1))
>values : Symbol(values, Decl(file.tsx, 30, 28))
>selectHandler : Symbol(selectHandler, Decl(file.tsx, 30, 50))
>val : Symbol(val, Decl(file.tsx, 30, 67))

